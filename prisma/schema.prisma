// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(uuid())
  email            String         @unique
  firstName        String         @default("NeuroFill User")
  lastName         String?
  profilePic       String?
  planId           String?
  password         String
  resetToken       String?        @unique
  resetTokenExpiry DateTime?
  creditBalance    Float          @default(0)
  transactions     Transactions[]
  resumes          Resume[]       @relation("UserToResume")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model PendingUser {
  id                String   @id @default(uuid())
  email             String   @unique
  firstName         String?
  lastName          String?
  profilePic        String?
  password          String
  verificationToken String   @unique
  tokenExpiresAt    DateTime
  createdAt         DateTime @default(now())
}

model Resume {
  id          String        @id @default(uuid())
  title       String        @default("Untitled")
  firstName   String
  lastName    String
  profession  String
  address     String
  phone       String
  email       String
  summary     String
  color       String?
  authorId    String
  author      User          @relation("UserToResume", fields: [authorId], references: [id], onDelete: Cascade)
  templateId  String?
  experience  Experience[]  @relation("ResumeToExperience")
  education   Education[]   @relation("ResumeToEducation")
  skill       Skill[]       @relation("ResumeToSkill")
  customField CustomField[] @relation("ResumeToCustomField")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  fontFamily  String?
}

model Experience {
  id               String  @id @default(uuid())
  position         String
  companyName      String
  city             String
  state            String
  startDate        String
  endDate          String
  currentlyWorking Boolean
  workSummary      String
  resumeId         String
  resume           Resume  @relation("ResumeToExperience", fields: [resumeId], references: [id], onDelete: Cascade)
}

model Education {
  id             String @id @default(uuid())
  degree         String
  universityName String
  major          String
  startDate      String
  endDate        String
  resumeId       String
  resume         Resume @relation("ResumeToEducation", fields: [resumeId], references: [id], onDelete: Cascade)
}

model Skill {
  id       String @id @default(uuid())
  name     String
  rating   String
  resumeId String
  resume   Resume @relation("ResumeToSkill", fields: [resumeId], references: [id], onDelete: Cascade)
}

model CustomField {
  id         String  @id @default(uuid())
  heading    String?
  subheading String
  content    String
  resumeId   String
  resume     Resume  @relation("ResumeToCustomField", fields: [resumeId], references: [id], onDelete: Cascade)
}

model Transactions {
  id        String   @id @default(uuid())
  stripeId  String   @unique
  amount    Float
  plan      String
  credit    Int
  buyerId   String
  buyer     User     @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}
